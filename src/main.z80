.assume adl=1

#include "src/inc/ti84pce.inc"

.org userMem-2
.db tExtTok,tAsm84CeCmp

ProgramStart:
	bit localizeHookActive,(iy+hookflags3)
	jr nz,fh_Uninstall
;At the start, ensure that the program is first in archive before setting a hook
	ld hl,fh_FileName
	call _Mov9ToOP1
	call _ChkFindSym
	call _ChkInRam
	jr nz,fh_IsArchived
	call _Arc_Unarc
	jr ProgramStart
fh_IsArchived:
;Set a hook at where the thing is in archive. Will persist until garbage collect
	ex de,hl
;Advance to actual data
	ld de,9
	add hl,de
	ld e,(hl)
	add hl,de
;offset composed of: namesize, filesize, header, and dist_to_hook
	ld de,1+2+2+(FontHook-ProgramStart)
	add hl,de
	call _SetLocalizeHook
	call _ClrLCDFull
	ld hl,fh_Installed
	jr fh_DrawString
fh_Uninstall:
	call _ClrLocalizeHook
	call _ClrLCDFull
	ld hl,fh_Uninstalled
fh_DrawString:
	push hl
		call _ClrLCDFull
		call _HomeUp
	pop hl
	jp _PutS
	
fh_FileName:
.db 5,"FONTHOOK",0
fh_Uninstalled:
.db "Un"
fh_Installed:
.db "installed localhook",0

;Inputs: B=chr, HL=adrToChrFont, A= (0=smf, 1=lgf_fix, 2=smfwidth, 3=lgf_vwd)
;Return value: NZ=cancel hook action (B,HL must be intact). Z=accept hook action
;Return values: Z=accept hook action.
;	Mode 0: HL in RAM where font data is copied to. prefer sFont_record.
;	Mode 1: HL in RAM where font data is copied to. prefer lFont_record
;	Mode 2: B is the width of the small font character.
;	Mode 3: HL in RAM where font data is copied to. Must be offset by +1.
;$75  ;smallfont
;$76  ;largefont
;$77  ;smallfont width
;$79  ;largefont in vw context
FontHook:   ;THIS IS ACTUALLY A LOCALIZEHOOK
.db 83h
	cp $75
	jr c,fh_outsiderange1
	cp $78
	jr nc,fh_outsiderange1
	push hl
		call __frameset0
FontHook_BaseAddress:
		pop ix
		push hl
		pop iy
		ld de,fh_mapto_A-FontHook_BaseAddress
		add iy,de
		call __indcall	;returns NZ if out of range
		ld iy,flags
		ex de,hl
	pop hl
	ret nz
	dec c
	jr z,fh_issmall
	dec c
	jr z,fh_islarge
	dec c
	jr z,fh_issmwidth
fh_islarge:
	ld hl,fh_largefontdata-FontHook_BaseAddress
	add hl,de
	ld c,14*2
	mlt bc
	add hl,bc
	ld de,lFont_record+1
	ld bc,14*2
	ldir
	xor a
	sbc hl,hl
	ld (lFont_record-3),hl
	ld (lFont_record+0),a
	ld (lFont_record+1+28),hl
	ld (lFont_record+1+28+3),a
	ld hl,lFont_record-3
	ret
;~~~~~~~~~~~~~~~~~~~~~~
fh_outsiderange1:
	jr fh_outsiderange
;~~~~~~~~~~~~~~~~~~~~~~
fh_issmall:
	ld hl,fh_smallfontdata-FontHook_BaseAddress
	add hl,de
	ld c,(12*2)+1
	mlt bc
	add hl,bc
	ld de,sFont_record
	ld bc,12*2
	ldir
	xor a
	sbc hl,hl
	ld (sFont_record+1+(2*12)),a
	ld (sFont_record+1+(2*12)+1),hl
	ret
	
fh_issmwidth:
	ld hl,fh_smallfontdata-FontHook_BaseAddress
	add hl,de
	ld c,(12*2)+1
	mlt bc
	add hl,bc
	ld b,(hl)
	xor a
	ret
	
	
	
		
		
fh_outsiderange:
	cp $0A
	jr nz,fh_isnotquasifunct
	;---Quasi-functions
	;Undocumented method of default handling:
	;the code below.
	ld de,(hl)
	ex de,hl
	cp a,a
	ret
fh_isnotquasifunct:
	cp $3A
	jr nz,fs_isnotconfigvars
	;---Config vars
	;Undocumented method of default handling:
	;Set NZ, then set A to B
	inc a
	ld a,b
	ret
fs_isnotconfigvars:
	cp $3B
	jr nz,fs_isnotdatatypes
	;---Data types
	;Undocumented method of default handling:
	;Set NZ, then set A to B
	inc a
	ld a,b
	ret
fs_isnotdatatypes:
	cp $42
	jr c,fs_notmemtype
	cp $44+1
	jr nc,fs_notmemtype
	;--Range of events for "Memory Cleared", "RAM Cleared", and "Defaults Set"
	cp a,a	;set Z for defaults.
	ret
fs_notmemtype:
;It must do other hooky things because localization hooks suck.
fh_hookdefault:
	xor a
	inc a
	ret
fh_mapto_A:
	sub $74	;so that dec c would be sfont, then lfont, then sfontw, then lfontF
	ld c,a
	ld a,b
	cp '0'
	jr c,fh_hookdefault
	cp '9'+1
	jr nc,fh_mapto_notnums
	sub '0'
	ld b,a
	xor a
	ret
fh_mapto_notnums:
	cp 'A'
	jr c,fh_hookdefault
	cp 'Z'+1
	jr nc,fh_mapto_notupper
	sub 'A'
	add a,10
	ld b,a
	xor a
	ret
fh_mapto_notupper:
	cp 'a'
	jr c,fh_hookdefault
	cp 'z'+1
	jr nc,fh_hookdefault
	sub 'a'
	add a,10+26
	ld b,a
	xor a
	ret
	
	
		
		
		
		
		
		
	
	
;Discoveries:
;Seems normal mode:
;Zero byte: left five bits are all that's active. The 3 lsbits in byte 0 are dead.
;Firstbyte: left seven bits are active, but should only use left six.
;Mathprint mode:
;HL is ignored, always reads 2w14h from lFont_record+1. Unknown if other
;condition checks would indicate that it is displaying from mathprint mode.
;The top and bottom nondisplayables are cleared on each run of the hook.
;Just to make sure.
;
fh_largefontdata:
#include "tools/fontpacker/output.txt"

;Small font: First byte is character width.
;If character width is 8 or less, each row is only one byte.
;If it's more than 8, then it's two bytes wide.
;Width is enforced even if it's way out of range
;	(e.g. 24 wide char only displays 16 bits width but spaced for 24 pixels)
;Top two rows should be kept clean but they seem to display reliably. They are
;encoded in the stuffs below.
;The two rows below the bottom of the character (the ones past the 12th) don't
;reliably display. They're not encoded and those bytes should be cleared each
;time you run the hook. which is what we hopefully do.

fh_smallfontdata:
#include "tools/fontpacker/output2.txt"






EndFontHook:

.echo "Program size; ",$-ProgramStart,", hook size: ",$-FontHook

